{"version":3,"sources":["components/Login.js","components/Home.js","components/Person.js","components/PersonForm.js","components/Course.js","components/CourseForm.js","components/Enrollment.js","components/EnrollmentForm.js","components/Assignment.js","components/AssignmentForm.js","components/Answer.js","components/AnswerForm.js","App.js","registerServiceWorker.js","index.js"],"names":["Login","props","useState","email","password","formFields","setFormFields","onFieldChange","event","target","name","value","onSubmit","preventDefault","onLogin","Table","hover","onChange","placeholder","type","Button","variant","Home","className","Image","src","alt","fluid","Person","personList","map","person","key","id","personname","isadmin","isteacher","isstudent","to","onClick","onPersonDelete","PersonForm","emptyForm","personId","parseInt","match","params","personid","useEffect","forEach","newValue","checked","onFormSubmit","setMessageText","Course","courseList","course","title","description","teacherid","teacherName","renderTeacher","startdate","enddate","passgrade","onCourseDelete","CourseForm","courseId","courseid","console","log","dateToString","date","getMonth","getDate","getFullYear","allTeachers","push","selected","Date","parse","dateSelected","Enrollment","courseTitle","renderCourse","enrollmentList","filter","enrollment","studentId","studentName","renderStudent","studentid","averagegrade","onEnrollmentDelete","EnrollmentForm","enrollmentId","enrollmentid","enrolledStudents","teacherId","find","availableStudents","includes","allStudents","renderStudentOptions","renderStaticStudent","Assignment","assignmentList","assignment","duedate","onAssignmentDelete","AssignmentForm","assignmentId","assignmentid","rows","cols","Answer","assignmentTitle","renderAssignment","answerList","answer","dateanswered","grade","dategraded","onAnswerDelete","AnswerForm","answerId","answerid","alreadyAnswered","API_URL_BASE","App","setPersonList","setCourseList","setEnrollmentList","setAssignmentList","setAnswerList","personUpdate","setPersonUpdate","courseUpdate","setCourseUpdate","enrollmentUpdate","setEnrollmentUpdate","assignmentUpdate","setAssignmentUpdate","answerUpdate","setAnswerUpdate","messageText","currentUser","setCurrentUser","sortById","objs","sort","a","b","sortByStudentId","axios","get","then","response","data","catch","error","message","user","onPersonFormSubmit","post","onCourseFormSubmit","parseFloat","onEnrollmentFormSubmit","onAssignmentFormSubmit","onAnswerFormSubmit","delete","Navbar","fixed","bg","Brand","path","exact","component","render","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9bc820ec.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport \"./Components.css\";\n\n// define Login component\nconst Login = (props) => {\n  // define emptyForm\n  const emptyForm = {\n    email: \"\",\n    password: \"\",\n  };\n\n  // define formFields\n  const [formFields, setFormFields] = useState(emptyForm);\n\n  // event when form field changes\n  const onFieldChange = (event) => {\n    setFormFields({\n      ...formFields,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // event for submit button\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.onLogin(formFields);\n  };\n\n  // main login form\n  return (\n    <div>\n      <h3>Login</h3>\n      <form onSubmit={onSubmit}>\n        <Table hover>\n          <tbody>\n            <tr>\n              <td>Email</td>\n              <td>\n                <input\n                  name=\"email\"\n                  onChange={onFieldChange}\n                  value={formFields.email}\n                  placeholder=\"email\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Password</td>\n              <td>\n                <input\n                  name=\"password\"\n                  onChange={onFieldChange}\n                  value={formFields.password}\n                  placeholder=\"password\"\n                  type=\"password\"\n                />\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n        <div>\n          <Button type=\"submit\" variant=\"primary\">\n            Login\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// define prop types\nLogin.propTypes = {\n  onLogin: PropTypes.func.isRequired,\n};\n\nexport default Login;\n","import React from \"react\";\nimport Image from \"react-bootstrap/Image\";\nimport \"./Components.css\";\n\n// Home Component\nconst Home = (props) => {\n  return (\n    <div className=\"container\">\n      <h1>Welcome!</h1>\n      <Image\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Universidade_Federal_do_Cear%C3%A1.png/1920px-Universidade_Federal_do_Cear%C3%A1.png\"\n        alt=\"School Picture\"\n        fluid\n        className=\"splash\"\n      ></Image>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\n\n// Person component\nconst Person = (props) => {\n  // render person\n  const renderPerson = () => {\n    return props.personList.map((person) => {\n      return (\n        <tr key={person.id}>\n          <td>{person.id}</td>\n          <td>{person.personname}</td>\n          <td>{person.email}</td>\n          <td className=\"yesno\">{person.isadmin ? `yes` : ``}</td>\n          <td className=\"yesno\">{person.isteacher ? `yes` : ``}</td>\n          <td className=\"yesno\">{person.isstudent ? `yes` : ``}</td>\n          <td>\n            <Link to={`/personform/${person.id}`}>\n              <Button variant=\"primary\">Edit</Button>\n            </Link>\n            &nbsp;\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                props.onPersonDelete(person.id);\n              }}\n            >\n              Delete\n            </Button>\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  // render main form\n  return (\n    <div>\n      <h1>Person</h1>\n      <div className=\"personlistlist\">\n        <Table hover>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Name</th>\n              <th>Email</th>\n              <th className=\"yesno\">Administrator</th>\n              <th className=\"yesno\">Teacher</th>\n              <th className=\"yesno\">Student</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>{renderPerson()}</tbody>\n        </Table>\n        <p>\n          <Link to=\"/personform/0\">\n            <Button variant=\"primary\">Add New</Button>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// define prop types\nPerson.propTypes = {\n  personList: PropTypes.array.isRequired,\n  onPersonDelete: PropTypes.func.isRequired,\n};\n\nexport default Person;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\n\n// define PersonForm component\nconst PersonForm = (props) => {\n  // define emptyForm\n  const emptyForm = {\n    id: 0,\n    email: \"\",\n    password: \"\",\n    personname: \"\",\n    isadmin: false,\n    isteacher: false,\n    isstudent: false,\n  };\n\n  // define formFields\n  const [formFields, setFormFields] = useState(emptyForm);\n\n  // get id from route parameter :personid\n  const personId = parseInt(props.match.params.personid);\n\n  // find data for current id, put in formFields\n  useEffect(() => {\n    if (personId !== 0) {\n      props.personList.forEach((person) => {\n        if (person.id === personId) {\n          setFormFields({\n            id: person.id,\n            email: person.email,\n            password: person.password,\n            personname: person.personname,\n            isadmin: person.isadmin,\n            isteacher: person.isteacher,\n            isstudent: person.isstudent,\n          });\n        }\n      });\n    }\n  }, [personId, props.personList]);\n\n  // event when form field changes\n  const onFieldChange = (event) => {\n    let newValue =\n      event.target.type === \"checkbox\"\n        ? event.target.checked\n        : event.target.value;\n    setFormFields({\n      ...formFields,\n      [event.target.name]: newValue,\n    });\n  };\n\n  // event for submit button\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (!(formFields.isteacher || formFields.isstudent || formFields.isadmin)) {\n      props.setMessageText(\n        `Validation: person must be an admin, a teacher or a student`\n      );\n      return;\n    }\n    props.onFormSubmit(formFields);\n    if (personId === 0) {\n      setFormFields(emptyForm);\n    }\n  };\n\n  // render main form\n  return (\n    <div>\n      <h3>Person Form</h3>\n      <form onSubmit={onSubmit}>\n        <Table hover>\n          <tbody>\n            <tr>\n              <td>Person Id</td>\n              <td>{formFields.id === 0 ? `New` : formFields.id}</td>\n            </tr>\n            <tr>\n              <td>Email</td>\n              <td>\n                <input\n                  name=\"email\"\n                  onChange={onFieldChange}\n                  value={formFields.email}\n                  placeholder=\"email\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Password</td>\n              <td>\n                <input\n                  name=\"password\"\n                  onChange={onFieldChange}\n                  value={formFields.password}\n                  placeholder=\"password\"\n                  type=\"password\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Name</td>\n              <td>\n                <input\n                  name=\"personname\"\n                  onChange={onFieldChange}\n                  value={formFields.personname}\n                  placeholder=\"name\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Administrator</td>\n              <td>\n                <input\n                  name=\"isadmin\"\n                  onChange={onFieldChange}\n                  checked={formFields.isadmin}\n                  type=\"checkbox\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Teacher</td>\n              <td>\n                <input\n                  name=\"isteacher\"\n                  onChange={onFieldChange}\n                  checked={formFields.isteacher}\n                  type=\"checkbox\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Student</td>\n              <td>\n                <input\n                  name=\"isstudent\"\n                  onChange={onFieldChange}\n                  checked={formFields.isstudent}\n                  type=\"checkbox\"\n                />\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n        <div>\n          <Button type=\"submit\" variant=\"primary\">\n            {personId === 0 ? \"Add\" : \"Save\"}\n          </Button>\n          &nbsp;\n          <Link to={`/person`}>\n            <Button variant=\"primary\">Person List</Button>\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// define prop types\nPersonForm.propTypes = {\n  personList: PropTypes.array.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n  setMessageText: PropTypes.func.isRequired,\n};\n\nexport default PersonForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\n\n// Course Component\nconst Course = (props) => {\n  // return teacher id and name\n  const renderTeacher = (teacherid) => {\n    let teacherName = `${teacherid} - Invalid Id`;\n    props.personList.forEach((person) => {\n      if (person.id === teacherid) {\n        if (person.isteacher) {\n          teacherName = `${person.id} - ${person.personname}`;\n        } else {\n          teacherName = `${teacherid} - Invalid Teacher`;\n        }\n      }\n    });\n    return teacherName;\n  };\n\n  // render course\n  const renderCourse = () => {\n    return props.courseList.map((course) => {\n      return (\n        <tr key={course.id}>\n          <td>{course.id}</td>\n          <td>{course.title}</td>\n          <td>{course.description}</td>\n          <td>{renderTeacher(course.teacherid)}</td>\n          <td>{course.startdate}</td>\n          <td>{course.enddate}</td>\n          <td>{course.passgrade}</td>\n          <td>\n            <Link to={`/enrollment/${course.id}`}>\n              <Button variant=\"primary\">Enrollment</Button>\n            </Link>\n            &nbsp;\n            <Link to={`/assignment/${course.id}`}>\n              <Button variant=\"primary\">Assignments</Button>\n            </Link>\n            &nbsp;\n            <Link to={`/courseform/${course.id}`}>\n              <Button variant=\"primary\">Edit</Button>\n            </Link>\n            &nbsp;\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                props.onCourseDelete(course.id);\n              }}\n            >\n              Delete\n            </Button>\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  // render main form\n  return (\n    <div>\n      <h1>Course</h1>\n      <div className=\"courselistlist\">\n        <Table hover>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Title</th>\n              <th>Description</th>\n              <th>Teacher - Id</th>\n              <th>Start Date</th>\n              <th>End Date</th>\n              <th>Passing Grade</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>{renderCourse()}</tbody>\n        </Table>\n        <p>\n          <Link to=\"/courseform/0\">\n            <Button variant=\"primary\">Add New</Button>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// define prop types\nCourse.propTypes = {\n  courseList: PropTypes.array.isRequired,\n  personList: PropTypes.array.isRequired,\n  onCourseDelete: PropTypes.func.isRequired,\n};\n\nexport default Course;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Components.css\";\n\n// define CourseForm component\nconst CourseForm = (props) => {\n  // get id from route parameter :id\n  const courseId = parseInt(props.match.params.courseid);\n\n  // define emptyForm\n  const emptyForm = {\n    id: 0,\n    teacherid: 0,\n    title: \"\",\n    description: \"\",\n    startdate: \"\",\n    enddate: \"\",\n    passgrade: 0,\n  };\n\n  // define formFields\n  const [formFields, setFormFields] = useState(emptyForm);\n\n  // find data for current id, put in formFields\n  useEffect(() => {\n    if (courseId !== 0) {\n      props.courseList.forEach((course) => {\n        if (course.id === courseId) {\n          setFormFields({\n            id: course.id,\n            teacherid: course.teacherid,\n            title: course.title,\n            description: course.description,\n            startdate: course.startdate,\n            enddate: course.enddate,\n            passgrade: course.passgrade,\n          });\n        }\n      });\n    }\n  }, [courseId, props.courseList]);\n\n  // event when form field changes\n  const onFieldChange = (event) => {\n    setFormFields({\n      ...formFields,\n      [event.target.name]: event.target.value,\n    });\n    console.log(\n      `onFieldChange name and value`,\n      event.target.name,\n      event.target.value\n    );\n  };\n\n  // convert date to string mm/dd/yyyy\n  const dateToString = (date) => {\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const year = date.getFullYear();\n    return month + \"/\" + day + \"/\" + year;\n  };\n\n  // event when start date changes\n  const onStartDateChange = (dateSelected) => {\n    setFormFields({\n      ...formFields,\n      startdate: dateToString(dateSelected),\n    });\n  };\n\n  // event when end date changes\n  const onEndDateChange = (dateSelected) => {\n    setFormFields({\n      ...formFields,\n      enddate: dateToString(dateSelected),\n    });\n  };\n\n  // event for submit button\n  const onSubmit = (event) => {\n    console.log(`onSubmit`, formFields);\n    event.preventDefault();\n    if (formFields.teacherid === 0) {\n      props.setMessageText(`Validation: course must have a teacher.`);\n      return;\n    }\n    props.onFormSubmit(formFields);\n    if (courseId === 0) {\n      setFormFields(emptyForm);\n    }\n  };\n\n  // render teacher\n  const renderTeacher = () => {\n    let allTeachers = [];\n    if (courseId === 0) {\n      allTeachers.push(\n        <option value={0} key={0}>\n          0 - Not Selected\n        </option>\n      );\n    }\n    props.personList.forEach((person) => {\n      if (person.isteacher) {\n        if (person.id === formFields.teacherid) {\n          allTeachers.push(\n            <option selected value={person.id} key={person.id}>\n              {person.id} - {person.personname}\n            </option>\n          );\n        } else {\n          allTeachers.push(\n            <option value={person.id} key={person.id}>\n              {person.id} - {person.personname}\n            </option>\n          );\n        }\n      }\n    });\n    return allTeachers;\n  };\n\n  // render main form\n  return (\n    <div>\n      <h3>Course Form</h3>\n      <form onSubmit={onSubmit}>\n        <Table hover>\n          <tbody>\n            <tr>\n              <td>Course Id</td>\n              <td>{formFields.id === 0 ? `New` : formFields.id}</td>\n            </tr>\n            <tr>\n              <td>Teacher</td>\n              <td>\n                <select\n                  name=\"teacherid\"\n                  value={formFields.teacherid}\n                  onChange={onFieldChange}\n                >\n                  {renderTeacher()};\n                </select>\n              </td>\n            </tr>\n            <tr>\n              <td>Title</td>\n              <td>\n                <input\n                  name=\"title\"\n                  onChange={onFieldChange}\n                  value={formFields.title}\n                  placeholder=\"title\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Description</td>\n              <td>\n                <input\n                  name=\"description\"\n                  onChange={onFieldChange}\n                  value={formFields.description}\n                  placeholder=\"description\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Start Date</td>\n              <td>\n                <DatePicker\n                  selected={Date.parse(formFields.startdate)}\n                  onChange={onStartDateChange}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>End Date</td>\n              <td>\n                <DatePicker\n                  selected={Date.parse(formFields.enddate)}\n                  onChange={onEndDateChange}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Passing Grade</td>\n              <td>\n                <input\n                  name=\"passgrade\"\n                  onChange={onFieldChange}\n                  value={formFields.passgrade}\n                  placeholder=\"passing grade\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n        <div>\n          <Button type=\"submit\" variant=\"primary\">\n            {courseId === 0 ? \"Add\" : \"Save\"}\n          </Button>\n          &nbsp;\n          <Link to={`/course`}>\n            <Button variant=\"primary\">Course List</Button>\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// define prop types\nCourseForm.propTypes = {\n  courseList: PropTypes.array.isRequired,\n  personList: PropTypes.array.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n  setMessageText: PropTypes.func.isRequired,\n};\n\nexport default CourseForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\n\n// Enrollment Component\nconst Enrollment = (props) => {\n  // get id from route parameter :id\n  const courseId = parseInt(props.match.params.courseid);\n\n  // render course\n  const renderCourse = () => {\n    let courseTitle = `${courseId} - N/A`;\n    props.courseList.forEach((course) => {\n      if (course.id === courseId) {\n        courseTitle = `${course.id} - ${course.title}`;\n      }\n    });\n    return courseTitle;\n  };\n\n  // render student\n  const renderStudent = (studentId) => {\n    let studentName = `${studentId} - N/A`;\n    props.personList.forEach((person) => {\n      if (person.id === studentId) {\n        studentName = `${person.id} - ${person.personname}`;\n      }\n    });\n    return studentName;\n  };\n\n  // render enrollment\n  const renderEnrollment = (enrollmentList) => {\n    return enrollmentList\n      .filter((enrollment) => enrollment.courseid === courseId)\n      .map((enrollment) => {\n        return (\n          <tr key={enrollment.id}>\n            <td>{enrollment.id}</td>\n            <td>{renderStudent(enrollment.studentid)}</td>\n            <td>{enrollment.averagegrade}</td>\n            <td>\n              <Link to={`/enrollmentform/${courseId}/${enrollment.id}`}>\n                <Button variant=\"primary\">Edit</Button>\n              </Link>\n              &nbsp;\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  props.onEnrollmentDelete(enrollment.id);\n                }}\n              >\n                Delete\n              </Button>\n            </td>\n          </tr>\n        );\n      });\n  };\n\n  // render main form\n  return (\n    <div>\n      <h1>Enrollment: Course {renderCourse()}</h1>\n      <div className=\"enrollmentlistlist\">\n        <Table hover>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Student Id</th>\n              <th>Grade</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>{renderEnrollment(props.enrollmentList)}</tbody>\n        </Table>\n        <p>\n          <Link to={`/enrollmentform/${courseId}/0`}>\n            <Button variant=\"primary\">Add New</Button>\n          </Link>\n          &nbsp;\n          <Link to={`/course`}>\n            <Button variant=\"primary\">Course List</Button>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// define prop types\nEnrollment.propTypes = {\n  enrollmentList: PropTypes.array.isRequired,\n  courseList: PropTypes.array.isRequired,\n  personList: PropTypes.array.isRequired,\n  onEnrollmentDelete: PropTypes.func.isRequired,\n};\n\nexport default Enrollment;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\n\n// define EnrollmentForm component\nconst EnrollmentForm = (props) => {\n  // get id from route parameter :id\n  const courseId = parseInt(props.match.params.courseid);\n  const enrollmentId = parseInt(props.match.params.enrollmentid);\n\n  // define emptyForm\n  const emptyForm = {\n    id: enrollmentId,\n    courseid: courseId,\n    studentid: 0,\n    averagegrade: 0,\n  };\n\n  // define formFields\n  const [formFields, setFormFields] = useState(emptyForm);\n\n  // find data for current id, put in formFields\n  useEffect(() => {\n    if (enrollmentId !== 0) {\n      props.enrollmentList.forEach((enrollment) => {\n        if (enrollment.id === enrollmentId) {\n          setFormFields({\n            id: enrollment.id,\n            courseid: enrollment.courseid,\n            studentid: enrollment.studentid,\n            averagegrade: enrollment.averagegrade,\n          });\n        }\n      });\n    }\n  }, [enrollmentId, props.enrollmentList]);\n\n  // event when form field changes\n  const onFieldChange = (event) => {\n    setFormFields({\n      ...formFields,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // event for submit button\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.onFormSubmit(formFields);\n    if (enrollmentId === 0) {\n      setFormFields(emptyForm);\n    }\n  };\n\n  // return current course id and title\n  const renderCourse = () => {\n    let courseTitle = `${courseId} - N/A`;\n    props.courseList.forEach((course) => {\n      if (course.id === courseId) {\n        courseTitle = `${courseId} - ${course.title}`;\n      }\n    });\n    return courseTitle;\n  };\n\n  // return current student id and name\n  const renderStaticStudent = () => {\n    let studentName = `${formFields.studentid} - N/A`;\n    props.personList.forEach((person) => {\n      if (person.id === formFields.studentid) {\n        studentName = `${person.id} - ${person.personname}`;\n      }\n    });\n    return studentName;\n  };\n\n  // show list of student for selection\n  const renderStudentOptions = () => {\n    // build a list of student ids already enrolled\n    const enrolledStudents = props.enrollmentList\n      .filter((enrollment) => enrollment.courseid === courseId)\n      .map((enrollment) => enrollment.studentid);\n\n    // includes course teacher in enrolled students list\n    // to avoid adding the teacher as student\n    const teacherId = props.courseList.find((course) => course.id === courseId)\n      .teacherid;\n    enrolledStudents.push(teacherId);\n\n    // build a list of students available to enroll\n    const availableStudents = props.personList.filter(\n      (person) => person.isstudent && !enrolledStudents.includes(person.id)\n    );\n\n    let allStudents = [];\n    if (formFields.studentid === 0) {\n      allStudents.push(\n        <option value={0} key={0}>\n          0 - Not selected\n        </option>\n      );\n    }\n    availableStudents.forEach((person) => {\n      allStudents.push(\n        <option value={person.id} key={person.id}>\n          {person.id} - {person.personname}\n        </option>\n      );\n    });\n    return allStudents;\n  };\n\n  // show student dropdown when adding\n  const renderStudent = () => {\n    if (enrollmentId === 0) {\n      return (\n        <select\n          name=\"studentid\"\n          value={formFields.studentid}\n          onChange={onFieldChange}\n        >\n          {renderStudentOptions()};\n        </select>\n      );\n    } else {\n      return renderStaticStudent();\n    }\n  };\n\n  // render main form\n  return (\n    <div>\n      <h3>Enrollment Form</h3>\n      <form onSubmit={onSubmit}>\n        <Table hover>\n          <tbody>\n            <tr>\n              <td>Enrollment Id</td>\n              <td>{formFields.id === 0 ? `New` : formFields.id}</td>\n            </tr>\n            <tr>\n              <td>Course</td>\n              <td>{renderCourse()}</td>\n            </tr>\n            <tr>\n              <td>Student</td>\n              <td>{renderStudent()}</td>\n            </tr>\n            <tr>\n              <td>Grade</td>\n              <td>\n                <input\n                  name=\"grade\"\n                  onChange={onFieldChange}\n                  value={formFields.averagegrade}\n                  placeholder=\"grade\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n        <div>\n          <Button type=\"submit\" variant=\"primary\">\n            {enrollmentId === 0 ? \"Add\" : \"Save\"}\n          </Button>\n          &nbsp;\n          <Link to={`/enrollment/${courseId}`}>\n            <Button variant=\"primary\">Enrollment List</Button>\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// define prop types\nEnrollmentForm.propTypes = {\n  enrollmentList: PropTypes.array.isRequired,\n  courseList: PropTypes.array.isRequired,\n  personList: PropTypes.array.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n};\n\nexport default EnrollmentForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\n\n// Assignment Component\nconst Assignment = (props) => {\n  // get id from route parameter :id\n  const courseId = parseInt(props.match.params.courseid);\n\n  // return course id and title\n  const renderCourse = () => {\n    let courseTitle = `${courseId} - N/A`;\n    props.courseList.forEach((course) => {\n      if (course.id === courseId) {\n        courseTitle = `${course.id} - ${course.title}`;\n      }\n    });\n    return courseTitle;\n  };\n\n  // render assignment\n  const renderAssignment = (assignmentList) => {\n    return assignmentList\n      .filter((assignment) => assignment.courseid === courseId)\n      .map((assignment) => {\n        return (\n          <tr key={assignment.id}>\n            <td>{assignment.id}</td>\n            <td>{assignment.title}</td>\n            <td>{assignment.description}</td>\n            <td>{assignment.duedate}</td>\n            <td>\n              <Link to={`/answer/${courseId}/${assignment.id}`}>\n                <Button variant=\"primary\">Answers</Button>\n              </Link>\n              &nbsp;\n              <Link to={`/assignmentform/${courseId}/${assignment.id}`}>\n                <Button variant=\"primary\">Edit</Button>\n              </Link>\n              &nbsp;\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  props.onAssignmentDelete(assignment.id);\n                }}\n              >\n                Delete\n              </Button>\n            </td>\n          </tr>\n        );\n      });\n  };\n\n  // render main form\n  return (\n    <div>\n      <h1>Assignments: Course {renderCourse()}</h1>\n      <div className=\"assignmentlistlist\">\n        <Table hover>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Title</th>\n              <th>Description</th>\n              <th>Due Date</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>{renderAssignment(props.assignmentList)}</tbody>\n        </Table>\n        <p>\n          <Link to={`/assignmentform/${courseId}/0`}>\n            <Button variant=\"primary\">Add New</Button>\n          </Link>\n          &nbsp;\n          <Link to={`/course`}>\n            <Button variant=\"primary\">Course List</Button>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// define prop types\nAssignment.propTypes = {\n  assignmentList: PropTypes.array.isRequired,\n  courseList: PropTypes.array.isRequired,\n  onAssignmentDelete: PropTypes.func.isRequired,\n};\n\nexport default Assignment;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Components.css\";\n\n// define AssignmentForm component\nconst AssignmentForm = (props) => {\n  // get id from route parameter :id\n  const courseId = parseInt(props.match.params.courseid);\n  const assignmentId = parseInt(props.match.params.assignmentid);\n\n  // define emptyForm\n  const emptyForm = {\n    id: assignmentId,\n    courseid: courseId,\n    title: \"\",\n    description: \"\",\n    duedate: \"\",\n  };\n\n  // define formFields\n  const [formFields, setFormFields] = useState(emptyForm);\n\n  // find data for current id, put in formFields\n  useEffect(() => {\n    if (assignmentId !== 0) {\n      props.assignmentList.forEach((assignment) => {\n        if (assignment.id === assignmentId) {\n          setFormFields({\n            id: assignment.id,\n            courseid: assignment.courseid,\n            title: assignment.title,\n            description: assignment.description,\n            duedate: assignment.duedate,\n          });\n        }\n      });\n    }\n  }, [assignmentId, props.assignmentList]);\n\n  // event when form field changes\n  const onFieldChange = (event) => {\n    setFormFields({\n      ...formFields,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // convert date to string mm/dd/yyyy\n  const dateToString = (date) => {\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const year = date.getFullYear();\n    return month + \"/\" + day + \"/\" + year;\n  };\n\n  // event when due date changes\n  const onDueDateChange = (dateSelected) => {\n    setFormFields({\n      ...formFields,\n      duedate: dateToString(dateSelected),\n    });\n  };\n\n  // event for submit button\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.onFormSubmit(formFields);\n    if (assignmentId === 0) {\n      setFormFields(emptyForm);\n    }\n  };\n\n  // return current course id and title\n  const renderCourse = () => {\n    let courseTitle = `${courseId} - N/A`;\n    props.courseList.forEach((course) => {\n      if (course.id === courseId) {\n        courseTitle = `${courseId} - ${course.title}`;\n      }\n    });\n    return courseTitle;\n  };\n\n  // render main form\n  return (\n    <div>\n      <h3>Assignment Form</h3>\n      <form onSubmit={onSubmit}>\n        <Table hover>\n          <tbody>\n            <tr>\n              <td>Assignment Id</td>\n              <td>{formFields.id === 0 ? `New` : formFields.id}</td>\n            </tr>\n            <tr>\n              <td>Course</td>\n              <td>{renderCourse()}</td>\n            </tr>\n            <tr>\n              <td>Title</td>\n              <td>\n                <input\n                  name=\"title\"\n                  onChange={onFieldChange}\n                  value={formFields.title}\n                  placeholder=\"title\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Description</td>\n              <td>\n                <textarea\n                  name=\"description\"\n                  onChange={onFieldChange}\n                  value={formFields.description}\n                  rows={5}\n                  cols={80}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Due Date</td>\n              <td>\n                <DatePicker\n                  selected={Date.parse(formFields.duedate)}\n                  onChange={onDueDateChange}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n        <div>\n          <Button type=\"submit\" variant=\"primary\">\n            {assignmentId === 0 ? \"Add\" : \"Save\"}\n          </Button>\n          &nbsp;\n          <Link to={`/assignment/${courseId}`}>\n            <Button variant=\"primary\">Assignment List</Button>\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// define prop types\nAssignmentForm.propTypes = {\n  assignmentList: PropTypes.array.isRequired,\n  courseList: PropTypes.array.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n};\n\nexport default AssignmentForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport \"./Components.css\";\nimport Assignment from \"./Assignment\";\n\n// Answer Component\nconst Answer = (props) => {\n  // get id from route parameter :id\n  const courseId = parseInt(props.match.params.courseid);\n  const assignmentId = parseInt(props.match.params.assignmentid);\n\n  // return course id and title\n  const renderCourse = () => {\n    let courseTitle = `${courseId} - N/A`;\n    props.courseList.forEach((course) => {\n      if (course.id === courseId) {\n        courseTitle = `${course.id} - ${course.title}`;\n      }\n    });\n    return courseTitle;\n  };\n\n  // return assignment id and title\n  const renderAssignment = () => {\n    let assignmentTitle = `${assignmentId} - N/A`;\n    props.assignmentList.forEach((assignment) => {\n      if (assignment.id === assignmentId) {\n        assignmentTitle = `${assignment.id} - ${assignment.title}`;\n      }\n    });\n    return assignmentTitle;\n  };\n\n  // return student id and name\n  const renderStudent = (studentid) => {\n    let studentName = `${studentid} - N/A`;\n    props.personList.forEach((person) => {\n      if (person.id === studentid) {\n        studentName = `${person.id} - ${person.personname}`;\n      }\n    });\n    return studentName;\n  };\n\n  // render answer\n  const renderAnswer = (answerList) => {\n    return answerList\n      .filter((answer) => answer.assignmentid === assignmentId)\n      .map((answer) => {\n        return (\n          <tr key={answer.id}>\n            <td>{answer.id}</td>\n            <td>{renderStudent(answer.studentid)}</td>\n            <td>{answer.answer}</td>\n            <td>{answer.dateanswered}</td>\n            <td>{answer.grade}</td>\n            <td>{answer.dategraded}</td>\n            <td>\n              <Link to={`/answerform/${courseId}/${assignmentId}/${answer.id}`}>\n                <Button variant=\"primary\">Edit</Button>\n              </Link>\n              &nbsp;\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  props.onAnswerDelete(answer.id);\n                }}\n              >\n                Delete\n              </Button>\n            </td>\n          </tr>\n        );\n      });\n  };\n\n  // render main form\n  return (\n    <div>\n      <h1>\n        Answers: Assignment {renderAssignment()} (Course {renderCourse()})\n      </h1>\n      <div className=\"answerlistlist\">\n        <Table hover>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Student</th>\n              <th>Answer</th>\n              <th>Date Answered</th>\n              <th>Grade</th>\n              <th>Date Graded</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>{renderAnswer(props.answerList)}</tbody>\n        </Table>\n        <p>\n          <Link to={`/answerform/${courseId}/${assignmentId}/0`}>\n            <Button variant=\"primary\">Add New</Button>\n          </Link>\n          &nbsp;\n          <Link to={`/assignment/${courseId}`}>\n            <Button variant=\"primary\">Assignment List</Button>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\n// define prop types\nAnswer.propTypes = {\n  answerList: PropTypes.array.isRequired,\n  assignmentList: PropTypes.array.isRequired,\n  courseList: PropTypes.array.isRequired,\n  personList: PropTypes.array.isRequired,\n  onAnswerDelete: PropTypes.func.isRequired,\n};\n\nexport default Answer;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Components.css\";\n\n// define AnswerForm component\nconst AnswerForm = (props) => {\n  // get id from route parameter :id\n  const courseId = parseInt(props.match.params.courseid);\n  const assignmentId = parseInt(props.match.params.assignmentid);\n  const answerId = parseInt(props.match.params.answerid);\n\n  // define emptyForm\n  const emptyForm = {\n    id: answerId,\n    assignmentid: assignmentId,\n    studentid: 0,\n    answer: \"\",\n    dateanswered: \"\",\n    grade: 0,\n    dategraded: \"\",\n  };\n\n  // define formFields\n  const [formFields, setFormFields] = useState(emptyForm);\n\n  // find data for current id, put in formFields\n  useEffect(() => {\n    if (answerId !== 0) {\n      props.answerList.forEach((answer) => {\n        if (answer.id === answerId) {\n          setFormFields({\n            id: answer.id,\n            assignmentid: answer.assignmentid,\n            studentid: answer.studentid,\n            answer: answer.answer,\n            dateanswered: answer.dateanswered,\n            grade: answer.grade,\n            dategraded: answer.dategraded,\n          });\n        }\n      });\n    }\n  }, [answerId, props.answerList]);\n\n  // event when form field changes\n  const onFieldChange = (event) => {\n    setFormFields({\n      ...formFields,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // convert date to string mm/dd/yyyy\n  const dateToString = (date) => {\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const year = date.getFullYear();\n    return month + \"/\" + day + \"/\" + year;\n  };\n\n  // event when date answered changes\n  const onDateAnsweredChange = (dateSelected) => {\n    setFormFields({\n      ...formFields,\n      dateanswered: dateToString(dateSelected),\n    });\n  };\n\n  // event when date graded changes\n  const onDateGradedChange = (dateSelected) => {\n    setFormFields({\n      ...formFields,\n      dategraded: dateToString(dateSelected),\n    });\n  };\n\n  // event for submit button\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.onFormSubmit(formFields);\n    if (answerId === 0) {\n      setFormFields(emptyForm);\n    }\n  };\n\n  // return current course id and title\n  const renderCourse = () => {\n    let courseTitle = `${courseId} - N/A`;\n    props.courseList.forEach((course) => {\n      if (course.id === courseId) {\n        courseTitle = `${courseId} - ${course.title}`;\n      }\n    });\n    return courseTitle;\n  };\n\n  // return assignment id and title\n  const renderAssignment = () => {\n    let assignmentTitle = `${assignmentId} - N/A`;\n    props.assignmentList.forEach((assignment) => {\n      if (assignment.id === assignmentId) {\n        assignmentTitle = `${assignment.id} - ${assignment.title}`;\n      }\n    });\n    return assignmentTitle;\n  };\n\n  // return current student id and name\n  const renderStaticStudent = () => {\n    let studentName = `${formFields.studentid} - N/A`;\n    props.personList.forEach((person) => {\n      if (person.id === formFields.studentid) {\n        studentName = `${person.id} - ${person.personname}`;\n      }\n    });\n    return studentName;\n  };\n\n  // show list of student for selection\n  const renderStudentOptions = () => {\n    // build a list of students enrolled in the course\n    const enrolledStudents = props.enrollmentList\n      .filter((enrollment) => enrollment.courseid === courseId)\n      .map((enrollment) => enrollment.studentid);\n\n    // build a list of students that already answered\n    const alreadyAnswered = props.answerList\n      .filter((answer) => answer.assignmentid === assignmentId)\n      .map((answer) => answer.studentid);\n\n    // build a list of students available to answer\n    const availableStudents = props.personList.filter(\n      (person) =>\n        person.isstudent &&\n        enrolledStudents.includes(person.id) &&\n        !alreadyAnswered.includes(person.id)\n    );\n\n    let allStudents = [];\n    if (formFields.studentid === 0) {\n      allStudents.push(\n        <option value={0} key={0}>\n          0 - Not selected\n        </option>\n      );\n    }\n    availableStudents.forEach((person) => {\n      allStudents.push(\n        <option value={person.id} key={person.id}>\n          {person.id} - {person.personname}\n        </option>\n      );\n    });\n    return allStudents;\n  };\n\n  // show student dropdown when adding\n  const renderStudent = () => {\n    if (answerId === 0) {\n      return (\n        <select\n          name=\"studentid\"\n          value={formFields.studentid}\n          onChange={onFieldChange}\n        >\n          {renderStudentOptions()};\n        </select>\n      );\n    } else {\n      return renderStaticStudent();\n    }\n  };\n\n  // render main form\n  return (\n    <div>\n      <h3>Answer Form</h3>\n      <form onSubmit={onSubmit}>\n        <Table hover>\n          <tbody>\n            <tr>\n              <td>Answer Id</td>\n              <td>{formFields.id === 0 ? `New` : formFields.id}</td>\n            </tr>\n            <tr>\n              <td>Course</td>\n              <td>{renderCourse()}</td>\n            </tr>\n            <tr>\n              <td>Assignment</td>\n              <td>{renderAssignment()}</td>\n            </tr>\n            <tr>\n              <td>Student</td>\n              <td>{renderStudent()}</td>\n            </tr>\n            <tr>\n              <td>Answer</td>\n              <td>\n                <textarea\n                  name=\"answer\"\n                  onChange={onFieldChange}\n                  value={formFields.answer}\n                  rows={5}\n                  cols={80}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Date Answered</td>\n              <td>\n                <DatePicker\n                  selected={Date.parse(formFields.dateanswered)}\n                  onChange={onDateAnsweredChange}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Grade</td>\n              <td>\n                <input\n                  name=\"grade\"\n                  onChange={onFieldChange}\n                  value={formFields.grade}\n                  placeholder=\"grade\"\n                  type=\"text\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Date Graded</td>\n              <td>\n                <DatePicker\n                  selected={Date.parse(formFields.dategraded)}\n                  onChange={onDateGradedChange}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n        <div>\n          <Button type=\"submit\" variant=\"primary\">\n            {answerId === 0 ? \"Add\" : \"Save\"}\n          </Button>\n          &nbsp;\n          <Link to={`/answer/${courseId}/${assignmentId}`}>\n            <Button variant=\"primary\">Answer List</Button>\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// define prop types\nAnswerForm.propTypes = {\n  answerList: PropTypes.array.isRequired,\n  assignmentList: PropTypes.array.isRequired,\n  enrollmentList: PropTypes.array.isRequired,\n  courseList: PropTypes.array.isRequired,\n  personList: PropTypes.array.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n};\n\nexport default AnswerForm;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"./App.css\";\n\nimport Login from \"./components/Login\";\nimport Home from \"./components/Home\";\nimport Person from \"./components/Person\";\nimport PersonForm from \"./components/PersonForm\";\nimport Course from \"./components/Course\";\nimport CourseForm from \"./components/CourseForm\";\nimport Enrollment from \"./components/Enrollment\";\nimport EnrollmentForm from \"./components/EnrollmentForm\";\nimport Assignment from \"./components/Assignment\";\nimport AssignmentForm from \"./components/AssignmentForm\";\nimport Answer from \"./components/Answer\";\nimport AnswerForm from \"./components/AnswerForm\";\n\n// Base URL for AWS API Gateway\nconst API_URL_BASE =\n  \"https://4jqwh1vygi.execute-api.us-west-2.amazonaws.com/prod\";\n\n// App component\nconst App = () => {\n  // state for tables\n  const [personList, setPersonList] = useState([]);\n  const [courseList, setCourseList] = useState([]);\n  const [enrollmentList, setEnrollmentList] = useState([]);\n  const [assignmentList, setAssignmentList] = useState([]);\n  const [answerList, setAnswerList] = useState([]);\n\n  // state to signal table changes\n  const [personUpdate, setPersonUpdate] = useState(0);\n  const [courseUpdate, setCourseUpdate] = useState(0);\n  const [enrollmentUpdate, setEnrollmentUpdate] = useState(0);\n  const [assignmentUpdate, setAssignmentUpdate] = useState(0);\n  const [answerUpdate, setAnswerUpdate] = useState(0);\n\n  // state for messages and logged in user\n  const [messageText, setMessageText] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // sort by id\n  const sortById = (objs) => {\n    return objs.sort((a, b) => (a.id > b.id ? 1 : b.id > a.id ? -1 : 0));\n  };\n\n  // sort by student id\n  const sortByStudentId = (objs) => {\n    return objs.sort((a, b) =>\n      a.studentid > b.studentid ? 1 : b.studentid > a.studentid ? -1 : 0\n    );\n  };\n\n  // API call to get all persons\n  useEffect(() => {\n    axios\n      .get(API_URL_BASE + \"/person\")\n      .then((response) => {\n        setPersonList(sortById(response.data));\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  }, [personUpdate]);\n\n  // API call to get all courses\n  useEffect(() => {\n    axios\n      .get(API_URL_BASE + \"/course\")\n      .then((response) => {\n        setCourseList(sortById(response.data));\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  }, [courseUpdate]);\n\n  // API call to get enrollment (coursestudent)\n  useEffect(() => {\n    axios\n      .get(API_URL_BASE + \"/coursestudent\")\n      .then((response) => {\n        setEnrollmentList(sortByStudentId(response.data));\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  }, [enrollmentUpdate]);\n\n  // API call to get all assignments\n  useEffect(() => {\n    axios\n      .get(API_URL_BASE + \"/assignment\")\n      .then((response) => {\n        setAssignmentList(sortById(response.data));\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  }, [assignmentUpdate]);\n\n  // API call to get all answers (assignmentstudents)\n  useEffect(() => {\n    axios\n      .get(API_URL_BASE + \"/assignmentstudent\")\n      .then((response) => {\n        setAnswerList(sortByStudentId(response.data));\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  }, [answerUpdate]);\n\n  // callback to login\n  const onLogin = (formFields) => {\n    let user = null;\n    personList.forEach((person) => {\n      if (\n        person.email === formFields.email &&\n        person.password === formFields.password\n      ) {\n        user = person;\n      }\n    });\n\n    if (user) {\n      setCurrentUser(user);\n      setMessageText(`Success: User logged in.`);\n    } else {\n      setMessageText(`Error: Invalid email or password.`);\n    }\n  };\n\n  // callback to add or update person form\n  const onPersonFormSubmit = (formFields) => {\n    setMessageText(formFields.id === 0 ? `Adding...` : `Updating...`);\n\n    // prepare params\n    const params = {\n      id: formFields.id,\n      email: formFields.email,\n      password: formFields.password,\n      personname: formFields.personname,\n      isadmin: formFields.isadmin,\n      isteacher: formFields.isteacher,\n      isstudent: formFields.isstudent,\n    };\n\n    // API call to add or update person\n    axios\n      .post(API_URL_BASE + `/person/${formFields.id}`, params)\n      .then((response) => {\n        setPersonUpdate(personUpdate + 1);\n        setMessageText(\n          formFields.id === 0\n            ? `Success: Person added.`\n            : `Success: Person updated.`\n        );\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to add or update course form\n  const onCourseFormSubmit = (formFields) => {\n    setMessageText(formFields.id === 0 ? `Adding...` : `Updating...`);\n\n    // prepare params\n    const params = {\n      id: formFields.id,\n      teacherid: parseInt(formFields.teacherid),\n      title: formFields.title,\n      description: formFields.description,\n      startdate: formFields.startdate,\n      enddate: formFields.enddate,\n      passgrade: parseFloat(formFields.passgrade),\n    };\n\n    // API call to add or update course\n    axios\n      .post(API_URL_BASE + `/course/${formFields.id}`, params)\n      .then((response) => {\n        setCourseUpdate(courseUpdate + 1);\n        setMessageText(\n          formFields.id === 0\n            ? `Success: Course added.`\n            : `Success: Course updated.`\n        );\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to add or update enrollment form\n  const onEnrollmentFormSubmit = (formFields) => {\n    setMessageText(formFields.id === 0 ? `Adding...` : `Updating...`);\n\n    // prepare params\n    const params = {\n      id: formFields.id,\n      courseid: parseInt(formFields.courseid),\n      studentid: parseInt(formFields.studentid),\n      averagegrade: parseFloat(formFields.averagegrade),\n    };\n\n    // API call to add or update enrollment (coursestudent)\n    axios\n      .post(API_URL_BASE + `/coursestudent/${formFields.id}`, params)\n      .then((response) => {\n        setEnrollmentUpdate(enrollmentUpdate + 1);\n        setMessageText(\n          formFields.id === 0\n            ? `Success: Enrollment added.`\n            : `Success: Enrollment updated.`\n        );\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to add or update assignment form\n  const onAssignmentFormSubmit = (formFields) => {\n    setMessageText(formFields.id === 0 ? `Adding...` : `Updating...`);\n\n    // prepare params\n    const params = {\n      id: formFields.id,\n      courseid: parseInt(formFields.courseid),\n      title: formFields.title,\n      description: formFields.description,\n      duedate: formFields.duedate,\n    };\n\n    // API call to add or update assignment\n    axios\n      .post(API_URL_BASE + `/assignment/${formFields.id}`, params)\n      .then((response) => {\n        setAssignmentUpdate(assignmentUpdate + 1);\n        setMessageText(\n          formFields.id === 0\n            ? `Success: Assignment added.`\n            : `Success: Assignment updated.`\n        );\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to add or update answer form\n  const onAnswerFormSubmit = (formFields) => {\n    setMessageText(formFields.id === 0 ? `Adding...` : `Updating...`);\n\n    // prepare params\n    const params = {\n      id: formFields.id,\n      assignmentid: parseInt(formFields.assignmentid),\n      studentid: parseInt(formFields.studentid),\n      answer: formFields.answer,\n      dateanswered: formFields.dateanswered,\n      grade: parseFloat(formFields.grade),\n      dategraded: formFields.dategraded,\n    };\n\n    // API call to add or update answer (assignmentstudent)\n    axios\n      .post(API_URL_BASE + `/assignmentstudent/${formFields.id}`, params)\n      .then((response) => {\n        setAnswerUpdate(answerUpdate + 1);\n        setMessageText(\n          formFields.id === 0\n            ? `Success: Answer added.`\n            : `Success: Answer updated.`\n        );\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to delete person\n  const onPersonDelete = (id) => {\n    setMessageText(`Deleting...`);\n\n    // API call to delete\n    axios\n      .delete(API_URL_BASE + `/person/${id}`)\n      .then((response) => {\n        setPersonUpdate(personUpdate + 1);\n        setMessageText(`Success: Person deleted.`);\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to delete course\n  const onCourseDelete = (id) => {\n    setMessageText(`Deleting...`);\n\n    // API call to delete\n    axios\n      .delete(API_URL_BASE + `/course/${id}`)\n      .then((response) => {\n        setCourseUpdate(courseUpdate + 1);\n        setMessageText(`Success: Course deleted.`);\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to delete enrollment (coursestudent)\n  const onEnrollmentDelete = (id) => {\n    setMessageText(`Deleting...`);\n\n    // API call to delete\n    axios\n      .delete(API_URL_BASE + `/coursestudent/${id}`)\n      .then((response) => {\n        setEnrollmentUpdate(enrollmentUpdate + 1);\n        setMessageText(`Success: Enrollment deleted.`);\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to delete assignment\n  const onAssignmentDelete = (id) => {\n    setMessageText(`Deleting...`);\n\n    // API call to delete\n    axios\n      .delete(API_URL_BASE + `/assignment/${id}`)\n      .then((response) => {\n        setAssignmentUpdate(assignmentUpdate + 1);\n        setMessageText(`Success: Assignment deleted.`);\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // callback to delete answer\n  const onAnswerDelete = (id) => {\n    setMessageText(`Deleting...`);\n\n    // API call to delete\n    axios\n      .delete(API_URL_BASE + `/assignmentstudent/${id}`)\n      .then((response) => {\n        setAnswerUpdate(answerUpdate + 1);\n        setMessageText(`Success: Answer deleted.`);\n      })\n      .catch((error) => {\n        setMessageText(`Error: ${error.message}`);\n      });\n  };\n\n  // Nav - show current user email if logged in\n  const renderUser = () => {\n    if (currentUser) {\n      return (\n        <ul className=\"navbar-nav\">\n          <li\n            className=\"nav-item\"\n            onClick={() => {\n              setCurrentUser(null);\n            }}\n          >\n            Logout\n          </li>\n          <li className=\"nav-item\">{currentUser.email}</li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">Not logged in</li>\n        </ul>\n      );\n    }\n  };\n\n  // Nav - render Navigation bar\n  const renderNavBar = () => {\n    return (\n      <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>AWSchool</Navbar.Brand>\n        <ul className=\"navbar-nav mr-auto\">\n          <Link to=\"/\">\n            <li className=\"nav-item\">Home</li>\n          </Link>\n          <Link to=\"/course\">\n            <li className=\"nav-item\">Course</li>\n          </Link>\n          <Link to=\"/person\">\n            <li className=\"nav-item\">Person</li>\n          </Link>\n        </ul>\n        {renderUser()}\n      </Navbar>\n    );\n  };\n\n  // render message\n  const renderMessage = () => {\n    if (messageText) {\n      return (\n        <p\n          onClick={() => {\n            setMessageText(\"\");\n          }}\n        >\n          {messageText}\n        </p>\n      );\n    } else {\n      return <div></div>;\n    }\n  };\n\n  // render footer\n  const renderFooter = () => {\n    return (\n      <footer>\n        <div className=\"padded-container\"></div>\n        <div className=\"copyright\">\n          <p>Copyright © 2020 Suely Barreto Ada-C13. All rights reserved. </p>\n        </div>\n      </footer>\n    );\n  };\n\n  // render all routes\n  const renderAllRoutes = () => {\n    return (\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route\n          path=\"/login\"\n          render={(props) => <Login {...props} onLogin={onLogin} />}\n        />\n        <Route\n          path=\"/person\"\n          render={(props) => (\n            <Person\n              {...props}\n              personList={personList}\n              onPersonDelete={onPersonDelete}\n            />\n          )}\n        />\n        <Route\n          path=\"/personform/:personid\"\n          render={(props) => (\n            <PersonForm\n              {...props}\n              personList={personList}\n              onFormSubmit={onPersonFormSubmit}\n              setMessageText={setMessageText}\n            />\n          )}\n        />\n        <Route\n          path=\"/course\"\n          render={(props) => (\n            <Course\n              {...props}\n              courseList={courseList}\n              personList={personList}\n              onCourseDelete={onCourseDelete}\n            />\n          )}\n        />\n        <Route\n          path=\"/courseform/:courseid\"\n          render={(props) => (\n            <CourseForm\n              {...props}\n              courseList={courseList}\n              personList={personList}\n              onFormSubmit={onCourseFormSubmit}\n              setMessageText={setMessageText}\n            />\n          )}\n        />\n        <Route\n          path=\"/enrollment/:courseid\"\n          render={(props) => (\n            <Enrollment\n              {...props}\n              enrollmentList={enrollmentList}\n              courseList={courseList}\n              personList={personList}\n              onEnrollmentDelete={onEnrollmentDelete}\n            />\n          )}\n        />\n        <Route\n          path=\"/enrollmentform/:courseid/:enrollmentid\"\n          render={(props) => (\n            <EnrollmentForm\n              {...props}\n              enrollmentList={enrollmentList}\n              courseList={courseList}\n              personList={personList}\n              onFormSubmit={onEnrollmentFormSubmit}\n            />\n          )}\n        />\n        <Route\n          path=\"/assignment/:courseid\"\n          render={(props) => (\n            <Assignment\n              {...props}\n              assignmentList={assignmentList}\n              courseList={courseList}\n              onAssignmentDelete={onAssignmentDelete}\n            />\n          )}\n        />\n        <Route\n          path=\"/assignmentform/:courseid/:assignmentid\"\n          render={(props) => (\n            <AssignmentForm\n              {...props}\n              assignmentList={assignmentList}\n              courseList={courseList}\n              onFormSubmit={onAssignmentFormSubmit}\n            />\n          )}\n        />\n        <Route\n          path=\"/answer/:courseid/:assignmentid\"\n          render={(props) => (\n            <Answer\n              {...props}\n              answerList={answerList}\n              assignmentList={assignmentList}\n              courseList={courseList}\n              personList={personList}\n              onAnswerDelete={onAnswerDelete}\n            />\n          )}\n        />\n        <Route\n          path=\"/answerform/:courseid/:assignmentid/:answerid\"\n          render={(props) => (\n            <AnswerForm\n              {...props}\n              answerList={answerList}\n              assignmentList={assignmentList}\n              enrollmentList={enrollmentList}\n              courseList={courseList}\n              personList={personList}\n              onFormSubmit={onAnswerFormSubmit}\n            />\n          )}\n        />\n      </Switch>\n    );\n  };\n\n  // render only login page until user logs in\n  const renderLoginOrRoutes = () => {\n    if (currentUser) {\n      return renderAllRoutes();\n    } else {\n      return <Login onLogin={onLogin} />;\n    }\n  };\n\n  // render main Router\n  return (\n    <Router>\n      <div className=\"AppRoute\">\n        {renderNavBar()}\n        {renderMessage()}\n        {renderFooter()}\n        {renderLoginOrRoutes()}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}